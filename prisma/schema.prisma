generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  templates     Template[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id         String   @id @default(cuid())
  name       String
  blocks     String   // Stored as JSON string
  assets     Asset[]
  settings   String?  // Stored as JSON string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Asset {
  id        String   @id @default(cuid())
  type      String
  url       String
  metadata  String?  // Stored as JSON string
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Template {
  id              String    @id @default(cuid())
  name            String
  description     String
  category        String
  niche           String
  subNiche        String?
  contentType     String
  targetAudience  String    // Stored as JSON string
  stylePreferences String   // Stored as JSON string
  blocks          String    // Stored as JSON string
  parameters      String    // Stored as JSON string
  version         String
  versionHistory  String    // Stored as JSON string
  parentId        String?
  parent          Template? @relation("TemplateVersions", fields: [parentId], references: [id])
  children        Template[] @relation("TemplateVersions")
  videoFormat     String    // Stores the video format ID
  isPublished     Boolean   @default(false)
  tags            String    // Stored as JSON string
  isBase          Boolean   @default(false)
  thumbnail       String?
  views           Int       @default(0)
  uses            Int       @default(0)
  shares          Int       @default(0)
  likes           Int       @default(0)
  trendScore      Float     @default(0)
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([isPublished])
  @@index([category])
  @@index([niche])
  @@index([contentType])
  @@index([trendScore])
}
